import 'dart:async';
import 'package:airsoft_game_map/models/scenario/bomb_operation/bomb_operation_scenario.dart';
import 'package:airsoft_game_map/models/scenario/bomb_operation/bomb_operation_state.dart';
import 'package:airsoft_game_map/models/scenario/bomb_operation/bomb_operation_team.dart';
import 'package:airsoft_game_map/models/scenario/bomb_operation/bomb_site.dart';
import 'package:airsoft_game_map/services/api_service.dart';
import 'package:airsoft_game_map/services/websocket/bomb_operation_web_socket_handler.dart';
import 'package:airsoft_game_map/services/websocket/web_socket_game_session_handler.dart';

/// Service pour g√©rer l'√©tat du sc√©nario Op√©ration Bombe
class BombOperationService {
  final ApiService _apiService;
  final BombOperationWebSocketHandler _bombOperationWebSocketHandler;

  // √âtat actuel du sc√©nario
  BombOperationState _currentState = BombOperationState.waiting;
  BombOperationState get currentState => _currentState;

  // Sc√©nario actif
  BombOperationScenario? _activeScenario;
  BombOperationScenario? get activeScenario => _activeScenario;

  // R√¥les des √©quipes (teamId -> r√¥le)
  final Map<int, BombOperationTeam> _teamRoles = {};
  Map<int, BombOperationTeam> get teamRoles => Map.unmodifiable(_teamRoles);

  // Sites de bombe actifs pour le round actuel
  final Set<int> _activeBombSites = {};
  Set<int> get activeBombSites => Set.unmodifiable(_activeBombSites);

  // Sites o√π une bombe est plant√©e
  final Set<int> _plantedBombSites = {};
  Set<int> get plantedBombSites => Set.unmodifiable(_plantedBombSites);

  // Temps restant pour la bombe active (en secondes)
  int _bombTimeRemaining = 0;
  int get bombTimeRemaining => _bombTimeRemaining;

  // Stream pour les mises √† jour d'√©tat
  final _stateStreamController = StreamController<BombOperationState>.broadcast();
  Stream<BombOperationState> get stateStream => _stateStreamController.stream;

  // Stream pour les mises √† jour des sites de bombe
  final _bombSitesStreamController = StreamController<void>.broadcast();
  Stream<void> get bombSitesStream => _bombSitesStreamController.stream;

  // Timer pour le compte √† rebours de la bombe
  Timer? _bombTimer;

  BombOperationService( this._apiService, this._bombOperationWebSocketHandler);

  /// Initialise le service avec le sc√©nario actif
  Future<void> initialize(int gameSessionId) async {
    try {
      // R√©cup√©rer le sc√©nario actif
      final response = await _apiService.get('game-sessions/$gameSessionId/bomb-operation');

      // Initialiser le sc√©nario
      _activeScenario = BombOperationScenario.fromJson(response['scenario']);

      // Initialiser les r√¥les des √©quipes
      final teamRolesJson = response['teamRoles'] as Map<String, dynamic>;
      teamRolesJson.forEach((teamIdStr, roleStr) {
        final teamId = int.parse(teamIdStr);
        final role = BombOperationTeamExtension.fromString(roleStr);
        _teamRoles[teamId] = role;
      });

      // Initialiser les sites actifs
      final activeSitesJson = response['activeBombSites'] as List;
      _activeBombSites.clear();
      for (final siteId in activeSitesJson) {
        _activeBombSites.add(siteId as int);
      }

      // Initialiser l'√©tat
      _currentState = BombOperationStateExtension.fromString(response['state']);

      // Initialiser les bombes plant√©es
      final plantedSitesJson = response['plantedBombSites'] as List;
      _plantedBombSites.clear();
      for (final siteId in plantedSitesJson) {
        _plantedBombSites.add(siteId as int);
      }

      // Initialiser le temps restant
      _bombTimeRemaining = response['bombTimeRemaining'] ?? 0;

      // D√©marrer le timer si une bombe est plant√©e
      if (_currentState == BombOperationState.bombPlanted && _bombTimeRemaining > 0) {
        _startBombTimer();
      }

      // Notifier les √©couteurs
      _stateStreamController.add(_currentState);
      _bombSitesStreamController.add(null);

      print('üß® BombOperationService initialis√© - gameSessionId: $gameSessionId');
    } catch (e) {
      print('‚ùå Erreur lors de l\'initialisation du BombOperationService: $e');
    }
  }

  /// G√®re les mises √† jour d'√©tat re√ßues via WebSocket
  void _handleBombOperationUpdate(Map<String, dynamic> data) {
    try {
      // Mettre √† jour l'√©tat
      final newState = BombOperationStateExtension.fromString(data['state']);
      _currentState = newState;

      // Mettre √† jour les sites actifs si pr√©sents
      if (data['activeBombSites'] != null) {
        final activeSites = data['activeBombSites'] as List;
        _activeBombSites.clear();
        for (final siteId in activeSites) {
          _activeBombSites.add(siteId as int);
        }
      }

      // Mettre √† jour les bombes plant√©es si pr√©sentes
      if (data['plantedBombSites'] != null) {
        final plantedSites = data['plantedBombSites'] as List;
        _plantedBombSites.clear();
        for (final siteId in plantedSites) {
          _plantedBombSites.add(siteId as int);
        }
      }

      // Mettre √† jour le temps restant si pr√©sent
      if (data['bombTimeRemaining'] != null) {
        _bombTimeRemaining = data['bombTimeRemaining'];

        // D√©marrer ou arr√™ter le timer selon l'√©tat
        if (_currentState == BombOperationState.bombPlanted && _bombTimeRemaining > 0) {
          _startBombTimer();
        } else {
          _stopBombTimer();
        }
      }

      // Notifier les √©couteurs
      _stateStreamController.add(_currentState);
      _bombSitesStreamController.add(null);

      print('üß® √âtat du sc√©nario Bombe mis √† jour - √©tat: ${_currentState.displayName}');
    } catch (e) {
      print('‚ùå Erreur lors du traitement de la mise √† jour du sc√©nario Bombe: $e');
    }
  }

  /// D√©marre le timer pour le compte √† rebours de la bombe
  void _startBombTimer() {
    // Arr√™ter tout timer existant
    _stopBombTimer();

    // Cr√©er un nouveau timer qui s'ex√©cute chaque seconde
    _bombTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (_bombTimeRemaining > 0) {
        _bombTimeRemaining--;
        _bombSitesStreamController.add(null); // Notifier pour mettre √† jour l'affichage
      } else {
        _stopBombTimer();
      }
    });
  }

  /// Arr√™te le timer pour le compte √† rebours de la bombe
  void _stopBombTimer() {
    _bombTimer?.cancel();
    _bombTimer = null;
  }

  /// Envoie une action pour planter une bombe sur un site
  Future<void> plantBomb(int fieldId, int gameSessionId, int bombSiteId) async {
    try {
      // Envoyer l'action via WebSocket
      _bombOperationWebSocketHandler.sendBombOperationAction(
        fieldId: fieldId,
        gameSessionId: gameSessionId,
        action: 'PLANT_BOMB',
        payload: {'bombSiteId': bombSiteId},
      );

      print('üß® Action envoy√©e: planter une bombe sur le site $bombSiteId');
    } catch (e) {
      print('‚ùå Erreur lors de l\'envoi de l\'action de plantation de bombe: $e');
    }
  }

  /// Envoie une action pour d√©samorcer une bombe sur un site
  Future<void> defuseBomb(int fieldId, int gameSessionId, int bombSiteId) async {
    try {
      _bombOperationWebSocketHandler.sendBombOperationAction(
        fieldId: fieldId,
        gameSessionId: gameSessionId,
        action: 'DEFUSE_BOMB',
        payload: {'bombSiteId': bombSiteId},
      );

      print('üß® Action envoy√©e: d√©samorcer la bombe sur le site $bombSiteId');
    } catch (e) {
      print('‚ùå Erreur lors de l\'envoi de l\'action de d√©samor√ßage de bombe: $e');
    }
  }

  /// Obtient tous les sites de bombe du sc√©nario
  List<BombSite> getAllBombSites() {
    if (_activeScenario == null || _activeScenario!.bombSites == null) {
      return [];
    }
    return _activeScenario!.bombSites!;
  }

  /// Obtient les sites de bombe actifs pour le round actuel
  List<BombSite> getActiveBombSites() {
    if (_activeScenario == null || _activeScenario!.bombSites == null) {
      return [];
    }
    return _activeScenario!.bombSites!
        .where((site) => _activeBombSites.contains(site.id))
        .toList();
  }

  /// Obtient les sites de bombe o√π une bombe est plant√©e
  List<BombSite> getPlantedBombSites() {
    if (_activeScenario == null || _activeScenario!.bombSites == null) {
      return [];
    }
    return _activeScenario!.bombSites!
        .where((site) => _plantedBombSites.contains(site.id))
        .toList();
  }

  void dispose() {
    _stopBombTimer();
    _stateStreamController.close();
    _bombSitesStreamController.close();
    print('üß® BombOperationService dispose');
  }

}
