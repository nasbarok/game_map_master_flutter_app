import 'dart:async';
import 'package:flutter/material.dart';
import 'package:game_map_master_flutter_app/models/scenario/bomb_operation/bomb_site.dart';
import 'package:game_map_master_flutter_app/models/scenario/bomb_operation/bomb_operation_scenario.dart';
import 'package:game_map_master_flutter_app/services/scenario/bomb_operation/bomb_operation_service.dart';
import 'package:game_map_master_flutter_app/services/scenario/bomb_operation/bomb_proximity_detection_service.dart';
import 'package:game_map_master_flutter_app/utils/logger.dart';

import '../../../models/websocket/bomb_defused_message.dart';
import '../../../models/websocket/bomb_exploded_message.dart';
import '../../../models/websocket/bomb_planted_message.dart';
import '../../../screens/scenario/bomb_operation/bomb_action_dialog.dart';

/// Gestionnaire automatique pour les actions de bombe
/// G√®re la d√©tection, les dialogs automatiques et les notifications
class BombOperationAutoManager {
  final BombOperationScenario _bombOperationScenario;
  final BombOperationService _bombOperationService;
  final int _gameSessionId;
  final int _fieldId;
  final int _userId;
  final BuildContext _context;

  late BombProximityDetectionService _proximityService;

  // √âtat actuel
  double _currentLatitude = 0.0;
  double _currentLongitude = 0.0;
  bool _isDialogOpen = false;

  // Sites de bombe actifs
  List<BombSite> _activeBombSites = [];

  // Callbacks pour l'interface utilisateur
  Function(String message, {bool isSuccess})? onStatusUpdate;
  Function(BombSite site, String action, String playerName)? onBombEvent;

  BombOperationAutoManager({
    required BombOperationScenario bombOperationScenario,
    required BombOperationService bombOperationService,
    required int gameSessionId,
    required int fieldId,
    required int userId,
    required BuildContext context,
  })  : _bombOperationScenario = bombOperationScenario,
        _bombOperationService = bombOperationService,
        _gameSessionId = gameSessionId,
        _fieldId = fieldId,
        _userId = userId,
        _context = context {
    _initializeServices();
  }

  /// Initialise les services
  void _initializeServices() {
    // Service de d√©tection de proximit√©
    _proximityService = BombProximityDetectionService(
      bombOperationService: _bombOperationService,
      bombOperationScenario: _bombOperationScenario,
      gameSessionId: _gameSessionId,
      userId: _userId,
    );

    // Configuration des callbacks de proximit√©
    _proximityService.onEnterBombZone = _handleEnterBombZone;
    _proximityService.onExitBombZone = _handleExitBombZone;
    _proximityService.onZoneStatusChanged = _handleZoneStatusChanged;

    logger.d('üéÆ [BombOperationAutoManager] Services initialis√©s');
  }

  /// D√©marre la gestion automatique
  Future<void> start({
    required List<BombSite> activeBombSites,
  }) async {
    _activeBombSites = activeBombSites;

    // D√©marrer la d√©tection de proximit√©
    _proximityService.startDetection();

    logger.d('üéÆ [BombOperationAutoManager] Gestion automatique d√©marr√©e');
  }

  /// Arr√™te la gestion automatique
  Future<void> stop() async {
    _proximityService.stopDetection();

    logger.d('üéÆ [BombOperationAutoManager] Gestion automatique arr√™t√©e');
  }

  /// Met √† jour la position du joueur
  void updatePlayerPosition(double latitude, double longitude) {
    _currentLatitude = latitude;
    _currentLongitude = longitude;
    _proximityService.updatePosition(latitude, longitude);
  }

  /// G√®re l'entr√©e dans une zone de bombe
  void _handleEnterBombZone(BombSite site) {
    onStatusUpdate?.call('Zone d√©tect√©e: ${site.name}', isSuccess: true);
    logger.d('üéØ [BombOperationAutoManager] Entr√©e zone: ${site.name}');
  }

  /// G√®re la sortie d'une zone de bombe
  void _handleExitBombZone(BombSite site) {
    // Si un dialog est ouvert, le fermer
    if (_isDialogOpen) {
      Navigator.of(_context).pop(false);
      _isDialogOpen = false;
      onStatusUpdate?.call('Action annul√©e - sortie de zone', isSuccess: false);
    }

    onStatusUpdate?.call('Sortie de zone: ${site.name}', isSuccess: false);
    logger.d('üö∂ [BombOperationAutoManager] Sortie zone: ${site.name}');
  }

  /// G√®re les changements de statut de zone
  void _handleZoneStatusChanged(BombSite site, bool canArm, bool canDisarm) {
    if (_isDialogOpen) return; // √âviter les dialogs multiples

    // D√©terminer l'action automatique √† effectuer
    BombActionType? actionType;
    int duration = 15; // Dur√©e par d√©faut

    if (canArm) {
      actionType = BombActionType.arm;
      duration = _bombOperationScenario.armingTime;
      onStatusUpdate?.call('Armement possible sur ${site.name}',
          isSuccess: true);
    } else if (canDisarm) {
      actionType = BombActionType.disarm;
      duration = _bombOperationScenario.defuseTime;
      onStatusUpdate?.call('D√©sarmement possible sur ${site.name}',
          isSuccess: true);
    }

    // Lancer automatiquement le dialog d'action
    if (actionType != null) {
      _showAutomaticActionDialog(site, actionType, duration);
    }

    logger.d(
        '‚öôÔ∏è [BombOperationAutoManager] Zone ${site.name}: arm=$canArm, disarm=$canDisarm');
  }

  /// Affiche automatiquement le dialog d'action
  Future<void> _showAutomaticActionDialog(
    BombSite site,
    BombActionType actionType,
    int duration,
  ) async {
    if (_isDialogOpen) return;

    _isDialogOpen = true;

    try {
      final result = await showBombActionDialog(
        context: _context,
        bombSite: site,
        actionType: actionType,
        duration: duration,
        bombOperationService: _bombOperationService,
        proximityService: _proximityService,
        gameSessionId: _gameSessionId,
        fieldId: _fieldId,
        userId: _userId,
        latitude: _currentLatitude,
        longitude: _currentLongitude,
      );

      _isDialogOpen = false;

      if (result == true) {
        final actionName =
            actionType == BombActionType.arm ? 'arm√©e' : 'd√©sarm√©e';
        onStatusUpdate?.call('Bombe $actionName avec succ√®s!', isSuccess: true);
      } else {
        onStatusUpdate?.call('Action annul√©e ou √©chou√©e', isSuccess: false);
      }
    } catch (e) {
      _isDialogOpen = false;
      onStatusUpdate?.call('Erreur lors de l\'action: $e', isSuccess: false);
      logger.d('‚ùå [BombOperationAutoManager] Erreur dialog: $e');
    }
  }

  /// G√®re les notifications de bombe plant√©e
  void _handleBombPlantedNotification(BombPlantedMessage message) {
    onBombEvent?.call(
      _findSiteById(message.siteId),
      'plant√©e',
      message.playerName!,
    );

    onStatusUpdate?.call(
      'üí£ ${message.playerName} a plant√© une bombe sur ${message.siteName}',
      isSuccess: false,
    );

    logger.d(
        'üí£ [BombOperationAutoManager] Notification: bombe plant√©e par ${message.playerName}');
  }

  /// G√®re les notifications de bombe d√©sarm√©e
  void _handleBombDefusedNotification(BombDefusedMessage message) {
    onBombEvent?.call(
      _findSiteById(message.siteId),
      'd√©sarm√©e',
      message.playerName!,
    );

    onStatusUpdate?.call(
      '‚úÖ ${message.playerName} a d√©sarm√© la bombe sur ${message.siteName}',
      isSuccess: true,
    );

    logger.d(
        '‚úÖ [BombOperationAutoManager] Notification: bombe d√©sarm√©e par ${message.playerName}');
  }

  /// G√®re les notifications de bombe explos√©e
  void _handleBombExplodedNotification(BombExplodedMessage message) {
    onBombEvent?.call(
      _findSiteById(message.siteId),
      'explos√©e',
      'Timer',
    );

    onStatusUpdate?.call(
      'üí• La bombe sur ${message.siteName} a explos√©!',
      isSuccess: false,
    );

    logger.d('üí• [BombOperationAutoManager] Notification: bombe explos√©e');
  }

  /// Trouve un site par son ID
  BombSite _findSiteById(int siteId) {
    try {
      return _activeBombSites.firstWhere((site) => site.id == siteId);
    } catch (e) {
      // Retourner un site par d√©faut si non trouv√©
      return BombSite(
        id: siteId,
        name: 'Site #$siteId',
        latitude: 0.0,
        longitude: 0.0,
        radius: 10.0,
        scenarioId: 0,
        bombOperationScenarioId: 0,
      );
    }
  }


  /// V√©rifie si dans une zone active
  bool get isInActiveZone => _proximityService.isInActiveZone;

  /// Obtient le site actuel
  BombSite? get currentSite => _proximityService.currentSite;

  /// Nettoie les ressources
  void dispose() {
    stop();
    _proximityService.dispose();
    logger.d('üßπ [BombOperationAutoManager] Gestionnaire nettoy√©');
  }
}
