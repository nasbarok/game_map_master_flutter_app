import 'package:airsoft_game_map/models/field.dart';
import 'package:airsoft_game_map/services/auth_service.dart';
import 'package:airsoft_game_map/services/websocket_service.dart';
import 'package:flutter/foundation.dart';
import 'dart:async';
import '../../models/game_map.dart';
import 'api_service.dart';

// Service pour g√©rer l'√©tat du jeu et la communication entre les composants
class GameStateService extends ChangeNotifier {
  bool _isTerrainOpen = false;
  GameMap? _selectedMap;
  List<dynamic>? _selectedScenarios = [];
  int? _gameDuration; // en minutes, null si pas de limite de temps
  int _connectedPlayers = 0;
  bool _isGameRunning = false;
  
  // Nouvelles propri√©t√©s pour le d√©compte
  DateTime? _gameEndTime;
  String _timeLeftDisplay = "00:00:00";
  Timer? _gameTimer;

  // Nouvelle liste pour g√©rer les joueurs connect√©s
  List<Map<String, dynamic>> _connectedPlayersList = [];

  // Getters
  bool get isTerrainOpen => _isTerrainOpen;
  GameMap? get selectedMap => _selectedMap;
  List<dynamic>? get selectedScenarios => _selectedScenarios;
  int? get gameDuration => _gameDuration;
  int get connectedPlayers => _connectedPlayers;
  bool get isGameRunning => _isGameRunning;
  String get timeLeftDisplay => _timeLeftDisplay;
  DateTime? get gameEndTime => _gameEndTime;
  List<Map<String, dynamic>> get connectedPlayersList => _connectedPlayersList;
  DateTime? _gameStartTime;
  DateTime? get gameStartTime => _gameStartTime;
  final ApiService _apiService;

  WebSocketService? _webSocketService;
  GameStateService(this._apiService, [this._webSocketService]);

  bool get isReady => _webSocketService != null;
  factory GameStateService.placeholder() {
    return GameStateService(ApiService.placeholder());
  }

  get gameStateService => null;

  // M√©thodes pour mettre √† jour l'√©tat
  void selectMap(GameMap? map) {
    _selectedMap = map;
    notifyListeners();
  }

  Future<void> handleTerrainOpen(Field field, ApiService apiService) async {
    try {
      if(field.active == false) {
        print('‚ÑπÔ∏è [toggleTerrainOpen] Terrain ferm√© : ${field.name}');
        return;
      }
      _isTerrainOpen = true;

      if (_isTerrainOpen) {
        print('üì° [OPEN] Terrain en cours d‚Äôouverture : ${field.name}');
        // Associer √† la carte si besoin
        if (_selectedMap != null && _selectedMap!.field == null) {
          _selectedMap = _selectedMap!.copyWith(field: field);
        }

        // Charger joueurs connect√©s
        print('üë• [OPEN] Appel GET /fields/${field.id}/players');
        final players = await apiService.get('fields/${field.id}/players');
        if (players is List) {
          _connectedPlayersList = players.map<Map<String, dynamic>>((p) {
            final user = p['user'];
            final team = p['team'];
            return {
              'id': user['id'],
              'username': user['username'],
              'teamId': team?['id'],
              'teamName': team?['name'],
            };
          }).toList();
          _connectedPlayers = _connectedPlayersList.length;
          print('‚úÖ [OPEN] Joueurs connect√©s restaur√©s ($_connectedPlayers)');
        }

        // Charger statut de jeu
        print('üéÆ [OPEN] Appel GET /games/${field.id}/status');
        final gameStatus = await apiService.get('games/${field.id}/status');

        _isGameRunning = false;
        _gameStartTime = null;
        _gameEndTime = null;

        if (gameStatus['status'] == 'RUNNING' && gameStatus['active'] == true) {
          _isGameRunning = true;

          if (gameStatus['startTime'] != null) {
            _gameStartTime = DateTime.parse(gameStatus['startTime']);
          }

          if (gameStatus['endTime'] != null) {
            _gameEndTime = DateTime.parse(gameStatus['endTime']);
          } else if (_gameStartTime != null && _gameDuration != null) {
            _gameEndTime = _gameStartTime!.add(Duration(minutes: _gameDuration!));
          }

          _startGameTimer();
          print('‚úÖ [OPEN] Partie en cours restaur√©e');
        }

      } else {
        // RESET si fermeture du terrain
        print('üîí [CLOSE] Fermeture du terrain');
        _selectedScenarios = [];
        _gameDuration = null;
        _connectedPlayers = 0;
        _isGameRunning = false;
        _gameTimer?.cancel();
        _gameEndTime = null;
        _gameStartTime = null;
        _timeLeftDisplay = "00:00:00";
        _connectedPlayersList.clear();
      }

      notifyListeners();
    } catch (e, stack) {
      print('‚ùå [toggleTerrainOpen] Erreur : $e');
      print('üìå Stacktrace : $stack');
    }
  }


  void setSelectedScenarios(List<dynamic> scenarios) {
    _selectedScenarios = scenarios;
    notifyListeners();
  }

  void setGameDuration(int? duration) {
    _gameDuration = duration;
    notifyListeners();
  }

  void updateConnectedPlayers(int count) {
    _connectedPlayers = count;
    notifyListeners();
  }

  void startGame() {
    if (!_isTerrainOpen || _selectedScenarios == null || _selectedScenarios!.isEmpty) {
      return; // Ne rien faire si les conditions ne sont pas remplies
    }
    
    _isGameRunning = true;
    
    // Calculer l'heure de fin si une dur√©e est d√©finie
    if (_gameDuration != null) {
      _gameEndTime = DateTime.now().add(Duration(minutes: _gameDuration!));
      _startGameTimer();
    } else {
      _timeLeftDisplay = "‚àû"; // Dur√©e illimit√©e
    }
    
    notifyListeners();
  }

  void _startGameTimer() {
    _gameTimer?.cancel();

    _gameTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      final now = DateTime.now();

      // Cas sans fin de partie connue
      if (_gameStartTime == null) {
        _timeLeftDisplay = "‚àû";
        notifyListeners();
        return;
      }

      // Calculer _gameEndTime si possible
      if (_gameEndTime == null && _gameDuration != null) {
        _gameEndTime = _gameStartTime!.add(Duration(minutes: _gameDuration!));
      }

      // Si on a maintenant une _gameEndTime, on calcule le temps restant
      if (_gameEndTime != null) {
        final difference = _gameEndTime!.difference(now);

        if (difference.isNegative) {
          _timeLeftDisplay = "00:00:00";
          stopGame();
          return;
        }

        final hours = difference.inHours.toString().padLeft(2, '0');
        final minutes = (difference.inMinutes % 60).toString().padLeft(2, '0');
        final seconds = (difference.inSeconds % 60).toString().padLeft(2, '0');

        _timeLeftDisplay = "$hours:$minutes:$seconds";
      } else {
        _timeLeftDisplay = "‚àû";
      }

      notifyListeners();
    });
  }


  void stopGame() {
    _isGameRunning = false;
    _gameTimer?.cancel();
    _gameEndTime = null;
    _timeLeftDisplay = "00:00:00";
    notifyListeners();
  }

  // M√©thode pour synchroniser le temps via WebSocket
  void syncGameTime(DateTime endTime) {
    _gameEndTime = endTime;
    if (_isGameRunning && _gameEndTime != null) {
      _startGameTimer();
    }
  }

  void incrementConnectedPlayers(payload) {
    print('üìà Ajout du joueur depuis payload : ${payload['fromUsername']} (ID: ${payload['fromUserId']})');

    addConnectedPlayer({
      'id': payload['fromUserId'],
      'username': payload['fromUsername'] ?? 'Joueur',
      'teamId': payload['teamId'],
      'teamName': payload['teamName'],
    });
  }

  // Nouvelles m√©thodes pour g√©rer la liste des joueurs connect√©s
  void addConnectedPlayer(Map<String, dynamic> player) {
    final existingIndex = _connectedPlayersList.indexWhere((p) => p['id'] == player['id']);
    print('üîç V√©rification si ${player['username']} (ID: ${player['id']}) est d√©j√† dans la liste ‚Üí index: $existingIndex');

    if (existingIndex == -1) {
      _connectedPlayersList.add(player);
      _connectedPlayers = _connectedPlayersList.length;
      print('‚úÖ Joueur ajout√©. Total connect√©s : $_connectedPlayers');
      notifyListeners();
    } else {
      print('‚ö†Ô∏è Joueur d√©j√† pr√©sent, non ajout√©.');
    }
  }

  // M√©thode pour v√©rifier si un joueur est d√©j√† connect√©
  bool isPlayerConnected(int playerId) {
    return _connectedPlayersList.any((p) => p['id'] == playerId);
  }

  // M√©thode pour supprimer un joueur connect√©
  void removeConnectedPlayer(int playerId) {
    _connectedPlayersList.removeWhere((p) => p['id'] == playerId);
    _connectedPlayers = _connectedPlayersList.length;
    notifyListeners();
  }

  // M√©thode pour vider la liste des joueurs connect√©s (quand le terrain est ferm√©)
  void clearConnectedPlayers() {
    _connectedPlayersList.clear();
    _connectedPlayers = 0;
    notifyListeners();
  }

  // R√©initialiser tout l'√©tat
  void reset() {
    _isTerrainOpen = false;
    _selectedMap = null;
    _selectedScenarios = [];
    _gameDuration = null;
    _connectedPlayers = 0;
    _isGameRunning = false;
    _gameEndTime = null;
    _timeLeftDisplay = "00:00:00";
    _connectedPlayersList.clear();

    if (_gameTimer != null) {
      _gameTimer!.cancel();
      _gameTimer = null;
    }

    notifyListeners();
  }

  Future<void> restoreSessionIfNeeded(ApiService apiService) async {

    try {
      // √âtape 1 : Terrain actif
      print('üîé [RESTORE] Appel GET /fields/active/current');
      final activeFieldResponse = await apiService.get('fields/active/current');
      print('üì¶ [RESTORE] R√©ponse terrain actif : $activeFieldResponse');

      // V√©rifier si la r√©ponse est valide
      if (activeFieldResponse == null) {
        print('‚ÑπÔ∏è [RESTORE] Aucun terrain actif trouv√©.');
        return;
      }

      // V√©rifier si la r√©ponse est au format attendu
      // V√©rifier si c'est un objet avec active=false
      if (activeFieldResponse is Map && activeFieldResponse['active'] == false) {
        print('‚ÑπÔ∏è [RESTORE] Aucun terrain actif trouv√©.');
        return;
      }

      final field = Field.fromJson(activeFieldResponse['field']);

      if(field.active == false) {
        print('‚ÑπÔ∏è [RESTORE]  terrain ferm√©.');
        return;
      }

      print('‚úÖ [RESTORE] Terrain actif : ${field.name} (ID: ${field.id}');

      if (_webSocketService == null) {
        print('üö® [RESTORE] WebSocketService est toujours null !');
      } else {
        print('üì° [RESTORE] WebSocketService inject√© correctement');
        _webSocketService?.subscribeToField(field.id!);
      }
      // √âtape 2 : Carte li√©e
      print('üîé [RESTORE] Appel GET /maps?fieldId=${field.id}');
      final map = await apiService.get('maps?fieldId=${field.id}');
      if (map == null) {
        print('‚ö†Ô∏è [RESTORE] Carte non trouv√©e (null)');
        return;
      }
      print('üì¶ [RESTORE] R√©ponse cartes : $map');

      final selected = GameMap.fromJson(map);
      print('‚úÖ [RESTORE] Carte s√©lectionn√©e : ${selected.name} (ID: ${selected.id})');
      selectMap(selected);

      // V√©rifier si l'utilisateur est un host ou un gamer
      final isHost = apiService.authService.currentUser?.hasRole('HOST') ?? false;
      final userId = apiService.authService.currentUser?.id;

      _isTerrainOpen = true;

      try {
        print('üîé [RESTORE] V√©rification du statut de la partie via le terrain');
        final gameStatus = await apiService.get('games/${field.id}/status');

        // S'assurer que isGameRunning est false par d√©faut
        _isGameRunning = false;

        if (gameStatus['status'] == 'RUNNING' && gameStatus['active'] == true) {
          _isGameRunning = true;

          if (gameStatus['startTime'] != null) {
            final startTimeStr = gameStatus['startTime'];
            _gameStartTime = DateTime.parse(startTimeStr);
          }

          if (gameStatus['endTime'] != null) {
            final endTimeStr = gameStatus['endTime'];
            _gameEndTime = DateTime.parse(endTimeStr);
          } else if (_gameStartTime != null && _gameDuration != null) {
            _gameEndTime = _gameStartTime!.add(Duration(minutes: _gameDuration!));
          }

          _startGameTimer();
        }

        print('‚úÖ [RESTORE] Statut de jeu : ${_isGameRunning ? "EN COURS" : "ARR√äT√â"}');
      } catch (e) {
        print('‚ö†Ô∏è [RESTORE] Erreur lors de la v√©rification du statut de jeu: $e');
        _isGameRunning = false;
      }

      // √âtape 3 : Joueurs connect√©s
      print('üîé [RESTORE] Appel GET /fields/${selected.field?.id}/players');
      final players = await apiService.get('fields/${selected.field?.id}/players');
      print('üì¶ [RESTORE] R√©ponse joueurs connect√©s : $players');

      if (players == null || players is! List) {
        print('‚ö†Ô∏è [RESTORE] Format inattendu pour les joueurs connect√©s.');
        return;
      }

      _connectedPlayersList = players.map<Map<String, dynamic>>((p) {
        final user = p['user'];
        final team = p['team'];
        return {
          'id': user['id'],
          'username': user['username'],
          'teamId': team?['id'],
          'teamName': team?['name'],
        };
      }).toList();

      _connectedPlayers = _connectedPlayersList.length;

      print('‚úÖ [RESTORE] Joueurs restaur√©s : $_connectedPlayers');
      notifyListeners();
    } catch (e, stack) {
      print('‚ùå [RESTORE] Erreur : $e');
      print('üìå Stacktrace : $stack');
    }
  }

  void setTerrainOpen(bool isOpen) {
    _isTerrainOpen = isOpen;

    if (!isOpen) {
      // R√©initialiser les valeurs si on ferme le terrain
      _selectedScenarios = [];
      _gameDuration = null;
      _connectedPlayers = 0;
      _isGameRunning = false;
      _gameTimer?.cancel();
      _gameEndTime = null;
      _timeLeftDisplay = "00:00:00";
      _connectedPlayersList.clear();
    }

    notifyListeners();
  }

  void updateConnectedPlayersList(List<Map<String, dynamic>> newList) {
    _connectedPlayersList = newList;
    _connectedPlayers = _connectedPlayersList.length;
    notifyListeners();
  }
  Future<void> connectHostToField() async {
    if (!_isTerrainOpen || _selectedMap == null || _selectedMap!.field == null) return;

    final authService = _apiService.authService;
    if (authService.currentUser == null || !authService.currentUser!.hasRole('HOST')) return;

    try {
      final fieldId = _selectedMap!.field!.id;
      final userId = authService.currentUser!.id;

      print('üîÑ Connexion automatique du host au terrain');
      await _apiService.post('fields/$fieldId/join', {});

      // Recharger les joueurs connect√©s
      await _loadConnectedPlayers();

      print('‚úÖ Host connect√© au terrain');
    } catch (e) {
      print('‚ùå Erreur lors de la connexion automatique du host: $e');
    }
  }

  Future<void> _loadConnectedPlayers() async {
    if (_selectedMap == null || _selectedMap!.field == null) return;

    try {
      final fieldId = _selectedMap!.field!.id;
      final players = await _apiService.get('fields/$fieldId/players');

      if (players == null || players is! List) {
        print('‚ö†Ô∏è Format inattendu pour les joueurs connect√©s.');
        return;
      }

      _connectedPlayersList = players.map<Map<String, dynamic>>((p) {
        final user = p['user'];
        final team = p['team'];
        return {
          'id': user['id'],
          'username': user['username'],
          'teamId': team?['id'],
          'teamName': team?['name'],
        };
      }).toList();

      _connectedPlayers = _connectedPlayersList.length;
      print('‚úÖ Joueurs connect√©s charg√©s : $_connectedPlayers');
      notifyListeners();
    } catch (e) {
      print('‚ùå Erreur lors du chargement des joueurs connect√©s: $e');
    }
  }
}
