import 'dart:async';
import 'package:airsoft_game_map/models/scenario/bomb_operation/bomb_operation_scenario.dart';
import 'package:airsoft_game_map/models/scenario/bomb_operation/bomb_operation_state.dart';
import 'package:airsoft_game_map/models/scenario/bomb_operation/bomb_operation_team.dart';
import 'package:airsoft_game_map/models/scenario/bomb_operation/bomb_site.dart';
import 'package:airsoft_game_map/services/api_service.dart';
import 'package:airsoft_game_map/services/websocket/bomb_operation_web_socket_handler.dart';
import 'package:airsoft_game_map/services/websocket/web_socket_game_session_handler.dart';
import 'package:airsoft_game_map/utils/logger.dart';

import '../../../models/scenario/bomb_operation/bomb_operation_session.dart';

/// Service pour g√©rer l'√©tat du sc√©nario Op√©ration Bombe
class BombOperationService {
  final ApiService _apiService;
  final BombOperationWebSocketHandler _bombOperationWebSocketHandler;

  // √âtat actuel du sc√©nario
  BombOperationState _currentState = BombOperationState.waiting;

  BombOperationState get currentState => _currentState;

  // Sc√©nario actif
  BombOperationSession? _sessionScenarioBomb;

  BombOperationSession? get activeSessionScenarioBomb => _sessionScenarioBomb;

  // R√¥les des √©quipes (teamId -> r√¥le)
  final Map<int, BombOperationTeam> _teamRoles = {};

  Map<int, BombOperationTeam> get teamRoles => Map.unmodifiable(_teamRoles);

  // Sites de bombe actifs pour le round actuel
  final Set<int> _activeBombSites = {};

  Set<int> get activeBombSites => Set.unmodifiable(_activeBombSites);

  // Sites o√π une bombe est plant√©e
  final Set<int> _plantedBombSites = {};

  Set<int> get plantedBombSites => Set.unmodifiable(_plantedBombSites);

  // Temps restant pour la bombe active (en secondes)
  int _bombTimeRemaining = 0;

  int get bombTimeRemaining => _bombTimeRemaining;

  // Stream pour les mises √† jour d'√©tat
  final _stateStreamController =
      StreamController<BombOperationState>.broadcast();

  Stream<BombOperationState> get stateStream => _stateStreamController.stream;

  // Stream pour les mises √† jour des sites de bombe
  final _bombSitesStreamController = StreamController<void>.broadcast();

  Stream<void> get bombSitesStream => _bombSitesStreamController.stream;

  // Timer pour le compte √† rebours de la bombe
  Timer? _bombTimer;

  BombOperationService(this._apiService, this._bombOperationWebSocketHandler);

  /// Initialise le service avec le sc√©nario actif
  Future<void> initialize(int gameSessionId) async {
    try {
      logger.d('üì° [BombOperationService] [initialize] R√©cup√©ration du sc√©nario Bombe pour gameSessionId: $gameSessionId');

      final response = await _apiService.get(
        'game-sessions/bomb-operation/by-game-session/$gameSessionId',
      );

      logger.d('üì• [BombOperationService] [initialize] R√©ponse brute re√ßue: $response');


      _sessionScenarioBomb = BombOperationSession.fromJson(response);
      logger.d('‚úÖ [BombOperationService] [initialize] Sc√©nario initialis√©: ${_sessionScenarioBomb?.id}');

      // Initialiser les r√¥les des √©quipes
      final teamRolesJson = response['teamRoles'];
      if (teamRolesJson == null) {
        throw Exception('Le champ "teamRoles" est nul ou absent');
      }
      teamRolesJson.forEach((teamIdStr, roleStr) {
        final teamId = int.parse(teamIdStr);
        final role = BombOperationTeamExtension.fromString(roleStr);
        _teamRoles[teamId] = role;
      });
      logger.d('‚úÖ [BombOperationService] [initialize] R√¥les des √©quipes: $_teamRoles');

      // Initialiser les sites actifs
      final activeSitesJson = response['activeBombSites'] as List? ?? [];
      _activeBombSites
        ..clear()
        ..addAll(activeSitesJson.cast<int>());
      logger.d('‚úÖ [BombOperationService] [initialize] Sites actifs: $_activeBombSites');

      // Initialiser l'√©tat
      final stateStr = response['state'];
      _currentState = BombOperationStateExtension.fromString(stateStr);
      logger.d('‚úÖ [BombOperationService] [initialize] √âtat actuel: $_currentState');

      // Initialiser les bombes plant√©es
      final plantedSitesJson = response['plantedBombSites'] as List? ?? [];
      _plantedBombSites
        ..clear()
        ..addAll(plantedSitesJson.cast<int>());
      logger.d('‚úÖ [BombOperationService] [initialize] Bombes plant√©es: $_plantedBombSites');

      // Initialiser le temps restant
      _bombTimeRemaining = response['bombTimeRemaining'] ?? 0;
      logger.d('‚è±Ô∏è [BombOperationService] [initialize] Temps restant: $_bombTimeRemaining sec');

      // D√©marrer le timer si une bombe est plant√©e
      if (_currentState == BombOperationState.bombPlanted &&
          _bombTimeRemaining > 0) {
        logger.d('‚è≤Ô∏è [BombOperationService] [initialize] D√©marrage du timer de bombe...');
        _startBombTimer();
      }

      // Notifier les √©couteurs
      _stateStreamController.add(_currentState);
      _bombSitesStreamController.add(null);
      logger.d('üß® [BombOperationService] [initialize] BombOperationService initialis√© - gameSessionId: $gameSessionId');
    } catch (e, stack) {
      logger.d('‚ùå [BombOperationService] [initialize] Erreur: $e');
      logger.t(stack);
    }
  }


  /// G√®re les mises √† jour d'√©tat re√ßues via WebSocket
  void _handleBombOperationUpdate(Map<String, dynamic> data) {
    try {
      // Mettre √† jour l'√©tat
      final newState = BombOperationStateExtension.fromString(data['state']);
      _currentState = newState;

      // Mettre √† jour les sites actifs si pr√©sents
      if (data['activeBombSites'] != null) {
        final activeSites = data['activeBombSites'] as List;
        _activeBombSites.clear();
        for (final siteId in activeSites) {
          _activeBombSites.add(siteId as int);
        }
      }

      // Mettre √† jour les bombes plant√©es si pr√©sentes
      if (data['plantedBombSites'] != null) {
        final plantedSites = data['plantedBombSites'] as List;
        _plantedBombSites.clear();
        for (final siteId in plantedSites) {
          _plantedBombSites.add(siteId as int);
        }
      }

      // Mettre √† jour le temps restant si pr√©sent
      if (data['bombTimeRemaining'] != null) {
        _bombTimeRemaining = data['bombTimeRemaining'];

        // D√©marrer ou arr√™ter le timer selon l'√©tat
        if (_currentState == BombOperationState.bombPlanted &&
            _bombTimeRemaining > 0) {
          _startBombTimer();
        } else {
          _stopBombTimer();
        }
      }

      // Notifier les √©couteurs
      _stateStreamController.add(_currentState);
      _bombSitesStreamController.add(null);

      logger.d(
          'üß® √âtat du sc√©nario Bombe mis √† jour - √©tat: ${_currentState.displayName}');
    } catch (e) {
      logger.d(
          '‚ùå Erreur lors du traitement de la mise √† jour du sc√©nario Bombe: $e');
    }
  }

  /// D√©marre le timer pour le compte √† rebours de la bombe
  void _startBombTimer() {
    // Arr√™ter tout timer existant
    _stopBombTimer();

    // Cr√©er un nouveau timer qui s'ex√©cute chaque seconde
    _bombTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (_bombTimeRemaining > 0) {
        _bombTimeRemaining--;
        _bombSitesStreamController
            .add(null); // Notifier pour mettre √† jour l'affichage
      } else {
        _stopBombTimer();
      }
    });
  }

  /// Arr√™te le timer pour le compte √† rebours de la bombe
  void _stopBombTimer() {
    _bombTimer?.cancel();
    _bombTimer = null;
  }

  /// Envoie une action pour planter une bombe sur un site
  Future<void> plantBomb(int fieldId, int gameSessionId, int bombSiteId) async {
    try {
      // Envoyer l'action via WebSocket
      _bombOperationWebSocketHandler.sendBombOperationAction(
        fieldId: fieldId,
        gameSessionId: gameSessionId,
        action: 'PLANT_BOMB',
        payload: {'bombSiteId': bombSiteId},
      );

      logger.d('üß® Action envoy√©e: planter une bombe sur le site $bombSiteId');
    } catch (e) {
      logger.d(
          '‚ùå Erreur lors de l\'envoi de l\'action de plantation de bombe: $e');
    }
  }

  /// Envoie une action pour d√©samorcer une bombe sur un site
  Future<void> defuseBomb(
      int fieldId, int gameSessionId, int bombSiteId) async {
    try {
      _bombOperationWebSocketHandler.sendBombOperationAction(
        fieldId: fieldId,
        gameSessionId: gameSessionId,
        action: 'DEFUSE_BOMB',
        payload: {'bombSiteId': bombSiteId},
      );

      logger
          .d('üß® Action envoy√©e: d√©samorcer la bombe sur le site $bombSiteId');
    } catch (e) {
      logger.d(
          '‚ùå Erreur lors de l\'envoi de l\'action de d√©samor√ßage de bombe: $e');
    }
  }

  /// Obtient tous les sites de bombe du sc√©nario
  List<BombSite>? getAllBombSites() {
    if (_sessionScenarioBomb == null || _sessionScenarioBomb!.bombOperationScenario?.bombSites == null) {
      return [];
    }
    return _sessionScenarioBomb!.bombOperationScenario?.bombSites;
  }

  /// Obtient les sites de bombe actifs pour le round actuel
  /// Retourne les sites de bombe actifs pour le round en cours
  List<BombSite> getActiveBombSites() {
    final sessionScenarioBomb = _sessionScenarioBomb;
    if (sessionScenarioBomb == null) return [];

    final bombOperationScenario = sessionScenarioBomb.bombOperationScenario;
    if (bombOperationScenario == null) return [];

    final bombSites = bombOperationScenario.bombSites;
    if (bombSites == null || bombSites.isEmpty) return [];

    return bombSites.where((site) => _activeBombSites.contains(site.id)).toList();
  }
  /// Obtient les sites de bombe o√π une bombe est plant√©e
  /// Retourne les sites de bombe o√π une bombe est actuellement plant√©e
  List<BombSite> getPlantedBombSites() {
    final sessionScenarioBomb = _sessionScenarioBomb;
    if (sessionScenarioBomb == null) return [];

    final bombOperationScenario = sessionScenarioBomb.bombOperationScenario;
    if (bombOperationScenario == null || bombOperationScenario.bombSites == null) return [];

    final allBombSites = bombOperationScenario.bombSites!;
    return allBombSites
        .where((site) => _plantedBombSites.contains(site.id))
        .toList();
  }


  /// Sauvegarde les r√¥les des √©quipes pour une session de jeu
  Future<void> saveTeamRoles(
      int gameSessionId, Map<int, BombOperationTeam> teamRoles) async {
    try {
      // Convertir les r√¥les en format API
      final Map<String, String> rolesForApi = {};
      teamRoles.forEach((teamId, role) {
        rolesForApi[teamId.toString()] = role.toString().split('.').last;
      });

      try {
        // Essayer d'envoyer au serveur
        await _apiService.post(
          'game-sessions/bomb-operation/$gameSessionId/team-roles',
          rolesForApi,
        );
      } catch (e) {
        // Si l'API n'est pas disponible, stocker localement uniquement
        logger.d(
            '‚ö†Ô∏è [BombOperationService] [saveTeamRoles] API non disponible pour sauvegarder les r√¥les des √©quipes: $e');
        logger.d('‚ö†Ô∏è [BombOperationService] [saveTeamRoles] Les r√¥les seront stock√©s uniquement localement');
      }
      // Mettre √† jour l'√©tat local
      _teamRoles.clear();
      _teamRoles.addAll(teamRoles);

      logger
          .d('üß® [BombOperationService] [saveTeamRoles] R√¥les des √©quipes sauvegard√©s pour la session $gameSessionId');
    } catch (e) {
      logger.d('‚ùå [BombOperationService] [saveTeamRoles] Erreur lors de la sauvegarde des r√¥les des √©quipes: $e');
      rethrow;
    }
  }

  /// S√©lectionne automatiquement des sites de bombe actifs pour une session de jeu
  Future<void> selectRandomBombSites(int gameSessionId) async {
    try {
      final sessionScenarioBomb = _sessionScenarioBomb;
      if (sessionScenarioBomb == null) {
        logger.e('‚ùå [BombOperationService] [selectRandomBombSites] Session Bombe non initialis√©e');
        return;
      }

      final bombOperationScenario = sessionScenarioBomb.bombOperationScenario;
      if (bombOperationScenario == null || bombOperationScenario.bombSites == null || bombOperationScenario.bombSites!.isEmpty) {
        logger.e('‚ùå [BombOperationService] [selectRandomBombSites] Aucun site de bombe d√©fini dans le sc√©nario');
        return;
      }

      final int? sitesToActivate = bombOperationScenario.activeSites;
      if (sitesToActivate == null) {
        logger.e('‚ùå [BombOperationService] [selectRandomBombSites] Nombre de sites √† activer non d√©fini dans le sc√©nario');
        return;
      }

      // Appel au backend pour qu‚Äôil s√©lectionne les sites
      final List<dynamic> activeSiteData = await _apiService.post(
        'game-sessions/bomb-operation/$gameSessionId/active-bomb-sites',
        {}, // aucun body n√©cessaire
      );

      // Conversion explicite en liste d'IDs
      final List<BombSite> activeSites = activeSiteData
          .map((json) => BombSite.fromJson(json))
          .toList();

      _activeBombSites
        ..clear()
        ..addAll(activeSites.map((site) => site.id!).toList());


      _bombSitesStreamController.add(null);

      logger.d('üß® [BombOperationService] [selectRandomBombSites] Sites actifs s√©lectionn√©s pour session $gameSessionId: $_activeBombSites');
    } catch (e) {
      logger.e('‚ùå [BombOperationService] [selectRandomBombSites] Erreur lors de la s√©lection al√©atoire des sites de bombe: $e');
      rethrow;
    }
  }



  Future<void> createBombOperationSession({
    required int scenarioId,
    required int gameSessionId,
  }) async {
    await _apiService.post(
      'game-sessions/bomb-operation?scenarioId=$scenarioId&gameSessionId=$gameSessionId',
      {},
    );
  }

  void dispose() {
    _stopBombTimer();
    _stateStreamController.close();
    _bombSitesStreamController.close();
    logger.d('üß® BombOperationService dispose');
  }

}
